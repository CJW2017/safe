#!/bin/bash

# NB: this file generates a header file with constants
#     used in src/safe/win/app_main.cpp
#     that helps the std::terminate() handler find the return address of
#     the C++ runtime's call to __cxa_throw()
#     it is specific to libstdc++
# XXX: currently this only works for i686 builds

set -e

NM="${BINUTILS_PREFIX}nm"
OBJDUMP="${BINUTILS_PREFIX}objdump"
CXXFILT="${BINUTILS_PREFIX}c++filt"
CXX="${BINUTILS_PREFIX}g++"

get_restore_ebp_esp () {
    EXE_FILE="$1"
    PREFIX="$2"
    FUNCTION_NAME="$3"
    FUNCTION_CALL_NAME="$4"

    # first find address of function
    FUNCTION_ADDRESS=$("$NM" "$EXE_FILE" | "$CXXFILT" | fgrep "T $FUNCTION_NAME" | awk "{ print \$1; }")
    if [ -z "$FUNCTION_ADDRESS" ]; then
        FUNCTION_ADDRESS=$("$NM" "$EXE_FILE" | "$CXXFILT" | fgrep "t $FUNCTION_NAME" | awk "{ print \$1; }")
    fi

    # find address of function call in function
    FUNCTION_CALL_ADDRESS=$("$OBJDUMP" --start-address=0x$FUNCTION_ADDRESS -d "$EXE_FILE" \
        | "$CXXFILT" | fgrep "$FUNCTION_CALL_NAME" \
        | awk '{ print $1; }' | head -n 1 | sed 's/:$//')

    # determine how to restore ebp/esp from this call site
    # to their values before the parent function was invoked
    # NB: we use the ".debug_frames" dwarf info to determine this
    # NB: this information is encoded as a function of the value
    #     of the ebp/esp registers at the call site i.e
    #         prev_esp = fn1(esp, ebp)
    #         prev_ebp = fn2(esp, ebp)
    #     we're returning fn(1/2) as simple macro functions
    OLDIFS="$IFS"
    IFS=$'\n'
    "$OBJDUMP" --dwarf=frames-interp "$EXE_FILE" | fgrep -A 1000 "pc=$FUNCTION_ADDRESS" | (
        # read matching line
        read

        # read header
        read HEADER

        # read each interpreted frame line until we get to the function
        # call address
        DEC_FUNCTION_CALL_ADDRESS=$(printf "%d" 0x"$FUNCTION_CALL_ADDRESS")
        while read LINE; do
            if [ -z "$LINE" ]; then break; fi

            LOC=$(printf "%d" 0x$(echo "$LINE" | awk '{ print $1 }'))
            if [ "$LOC" -gt "$DEC_FUNCTION_CALL_ADDRESS" ]; then break; fi

            LAST_LINE="$LINE"
        done

        CFA_EXPRESSION=$(echo "$LAST_LINE" | awk '{ print $2 }')

        # figure out how to restore esb first
        EBP_IDX=0
        FOUND_EBP=""
        IFS=" "
        for COLUMN in $HEADER; do
            if [ "$COLUMN" = "ebp" ]; then
                # parse out from FDE table how to restore ebp
                EBP_RESTORE_STATE=$(echo "$LAST_LINE" | awk "{ print \$$(($EBP_IDX + 1))}")
                case $EBP_RESTORE_STATE in
                    c*) PREV_EBP_CFA_OFFSET=$(echo "$EBP_RESTORE_STATE" | sed 's/^c//') ;;
                    *) false ;;
                esac

                echo "#define _${PREFIX}_prev_ebp(ebp, esp) $CFA_EXPRESSION + $PREV_EBP_CFA_OFFSET"
                echo "#define ${PREFIX}_prev_ebp(ebp, esp) (*(decltype(ebp) *) (_${PREFIX}_prev_ebp(((char *) (ebp)), ((char *) (esp)))))"
                FOUND_EBP=true
                break;
            fi
            EBP_IDX=$(($EBP_IDX + 1))
        done

        # if we didn't find a restore command for ebp, then it wasn't modified
        if [ -z "$FOUND_EBP" ]; then
            echo "#define ${PREFIX}_prev_ebp(ebp, esp) (ebp)"
        fi

        # NB: restore esp is easy, just use CFA expression
        echo "#define _${PREFIX}_prev_esp(ebp, esp) $CFA_EXPRESSION"
        echo "#define ${PREFIX}_prev_esp(ebp, esp) ((decltype(esp)) (_${PREFIX}_prev_esp(((char *) (ebp)), ((char *) (esp)))))"
        )

    IFS="$OLDIFS"
}

EXE_FILE="$1"

cat <<EOF
/* DO NOT EDIT THIS FILE,
   IT WAS AUTOMATICALLY GENERATED on $(date)
   by $PWD/${BASH_SOURCE[0]} */
#ifndef __libstdcxx_get_exception_state_h
#define __libstdcxx_get_exception_state_h
EOF

get_restore_ebp_esp "$EXE_FILE" "__terminate" "__cxxabiv1::__terminate(void (*)())" "_abort"
get_restore_ebp_esp "$EXE_FILE" "__std_terminate" "std::terminate()" "__cxxabiv1::__terminate(void (*)())"
get_restore_ebp_esp "$EXE_FILE" "__cxa_throw" "___cxa_throw" "std::terminate()"

# now that we've generated the restore functions for each nested call
# compose them to hide call stack detail from users of this header

cat <<EOF
#define libstdcxx_get_exception_ebp(ebp, esp) \
   __cxa_throw_prev_ebp( \
      __std_terminate_prev_ebp(__terminate_prev_ebp(ebp, esp), __terminate_prev_esp(ebp, esp)), \
      __std_terminate_prev_esp(__terminate_prev_ebp(ebp, esp), __terminate_prev_esp(ebp, esp)))

#define libstdcxx_get_exception_esp(ebp, esp) \
   __cxa_throw_prev_esp( \
      __std_terminate_prev_ebp(__terminate_prev_ebp(ebp, esp), __terminate_prev_esp(ebp, esp)), \
      __std_terminate_prev_esp(__terminate_prev_ebp(ebp, esp), __terminate_prev_esp(ebp, esp)))

EOF


cat <<EOF
#endif
EOF